{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport storage from \"./local.storage\";\n\nvar CartStorage = function () {\n  function CartStorage() {\n    var _this = this;\n\n    _classCallCheck(this, CartStorage);\n\n    this.items = [];\n    this.observers = [];\n    storage.getItem(CartStorage.LOCAL_VAR).then(function (value) {\n      if (value !== undefined && value !== null) {\n        var items = JSON.parse(value);\n        items.forEach(function (item) {\n          return _this.items.push(item);\n        });\n      }\n    });\n  }\n\n  _createClass(CartStorage, [{\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      this.observers.push(observer);\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var itemSaved;\n      return _regeneratorRuntime.async(function add$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              itemSaved = this.getItem(item.product);\n\n              if (!itemSaved) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.removeItem(itemSaved));\n\n            case 4:\n              if (itemSaved !== undefined && itemSaved !== null) {\n                itemSaved.amount = itemSaved.amount + item.amount;\n                this.items.push(itemSaved);\n              } else {\n                this.items.push(item);\n              }\n\n              this.observers.forEach(function (observer) {\n                return observer();\n              });\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(this.commit());\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(product) {\n      return this.items.find(function (item) {\n        return item.product.id === product.id;\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      var itemSaved;\n      return _regeneratorRuntime.async(function remove$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              itemSaved = this.getItem(item.product);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this.removeItem(itemSaved));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function clear$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this.items.forEach(function (item) {\n                return _this2.removeItem(item);\n              });\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(storage.removeItem(CartStorage.LOCAL_VAR));\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item) {\n      return _regeneratorRuntime.async(function removeItem$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this.items.splice(this.items.indexOf(item), 1);\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.commit());\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return _regeneratorRuntime.async(function commit$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(storage.setItem(CartStorage.LOCAL_VAR, JSON.stringify(this.items)));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return CartStorage;\n}();\n\nCartStorage.LOCAL_VAR = \"CART\";\nexport default new CartStorage();","map":{"version":3,"sources":["/Users/uedsonreis/Documents/Projetos/faculdades/aulas/example-ecommerce-react/src/storage/cart.storage.ts"],"names":["storage","CartStorage","items","observers","getItem","LOCAL_VAR","then","value","undefined","JSON","parse","forEach","item","push","observer","itemSaved","product","removeItem","amount","commit","find","id","splice","indexOf","setItem","stringify"],"mappings":";;;AAGA,OAAOA,OAAP;;IAEMC,W;AAQF,yBAAc;AAAA;;AAAA;;AAAA,SAJEC,KAIF,GAJkB,EAIlB;AAAA,SAFGC,SAEH,GAF2B,EAE3B;AACVH,IAAAA,OAAO,CAACI,OAAR,CAAgBH,WAAW,CAACI,SAA5B,EAAuCC,IAAvC,CAA4C,UAACC,KAAD,EAAgB;AACxD,UAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;AACvC,YAAML,KAAK,GAAGO,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAd;AACAL,QAAAA,KAAK,CAACS,OAAN,CAAc,UAAAC,IAAI;AAAA,iBAAI,KAAI,CAACV,KAAL,CAAWW,IAAX,CAAgBD,IAAhB,CAAJ;AAAA,SAAlB;AACH;AACJ,KALD;AAMH;;;;gCAEkBE,Q,EAAoB;AACnC,WAAKX,SAAL,CAAeU,IAAf,CAAoBC,QAApB;AACH;;;wBAEgBF,I;;;;;;AACPG,cAAAA,S,GAAkB,KAAKX,OAAL,CAAaQ,IAAI,CAACI,OAAlB,C;;mBACpBD,S;;;;;;+CAAiB,KAAKE,UAAL,CAAgBF,SAAhB,C;;;AAErB,kBAAIA,SAAS,KAAKP,SAAd,IAA2BO,SAAS,KAAK,IAA7C,EAAmD;AAC/CA,gBAAAA,SAAS,CAACG,MAAV,GAAmBH,SAAS,CAACG,MAAV,GAAoBN,IAAI,CAACM,MAA5C;AACA,qBAAKhB,KAAL,CAAWW,IAAX,CAAgBE,SAAhB;AACH,eAHD,MAGO;AACH,qBAAKb,KAAL,CAAWW,IAAX,CAAgBD,IAAhB;AACH;;AAED,mBAAKT,SAAL,CAAeQ,OAAf,CAAuB,UAAAG,QAAQ;AAAA,uBAAIA,QAAQ,EAAZ;AAAA,eAA/B;;+CACM,KAAKK,MAAL,E;;;;;;;;;;;4BAGMH,O,EAAoC;AAChD,aAAO,KAAKd,KAAL,CAAWkB,IAAX,CAAgB,UAACR,IAAD;AAAA,eAAgBA,IAAI,CAACI,OAAL,CAAcK,EAAd,KAAqBL,OAAO,CAACK,EAA7C;AAAA,OAAhB,CAAP;AACH;;;2BAEmBT,I;;;;;;AACVG,cAAAA,S,GAAkB,KAAKX,OAAL,CAAaQ,IAAI,CAACI,OAAlB,C;;+CAClB,KAAKC,UAAL,CAAgBF,SAAhB,C;;;;;;;;;;;;;;;;;;AAIN,mBAAKb,KAAL,CAAWS,OAAX,CAAmB,UAAAC,IAAI;AAAA,uBAAI,MAAI,CAACK,UAAL,CAAgBL,IAAhB,CAAJ;AAAA,eAAvB;;+CACMZ,OAAO,CAACiB,UAAR,CAAmBhB,WAAW,CAACI,SAA/B,C;;;;;;;;;;;+BAGeO,I;;;;;AACrB,mBAAKV,KAAL,CAAWoB,MAAX,CAAkB,KAAKpB,KAAL,CAAWqB,OAAX,CAAmBX,IAAnB,CAAlB,EAA4C,CAA5C;;+CACM,KAAKO,MAAL,E;;;;;;;;;;;;;;;;;+CAIAnB,OAAO,CAACwB,OAAR,CAAgBvB,WAAW,CAACI,SAA5B,EAAuCI,IAAI,CAACgB,SAAL,CAAe,KAAKvB,KAApB,CAAvC,C;;;;;;;;;;;;;;AAxDRD,W,CAEsBI,S,GAAoB,M;AA2DhD,eAAe,IAAIJ,WAAJ,EAAf","sourcesContent":["import { Item } from '../model/item';\nimport { Product } from '../model/product';\n\nimport storage from './local.storage';\n\nclass CartStorage {\n\n    private static readonly LOCAL_VAR: string = \"CART\";\n\n    public readonly items: Item[] = [];\n\n    private readonly observers: Function[] = []\n\n    constructor() {\n        storage.getItem(CartStorage.LOCAL_VAR).then((value: any) => {\n            if (value !== undefined && value !== null) {\n                const items = JSON.parse(value) as Array<Item>;\n                items.forEach(item => this.items.push(item));\n            }\n        });\n    }\n\n    public addObserver(observer: Function) {\n        this.observers.push(observer);\n    }\n\n    public async add(item: Item): Promise<void> {\n        const itemSaved: Item = this.getItem(item.product!)!;\n        if (itemSaved) await this.removeItem(itemSaved);\n        \n        if (itemSaved !== undefined && itemSaved !== null) {\n            itemSaved.amount = itemSaved.amount! + item.amount!;\n            this.items.push(itemSaved);\n        } else {\n            this.items.push(item);\n        }\n\n        this.observers.forEach(observer => observer());\n        await this.commit();\n    }\n\n    private getItem(product: Product): Item | undefined {\n        return this.items.find((item: Item) => item.product!.id === product.id);\n    }\n\n    public async remove(item: Item): Promise<void> {\n        const itemSaved: Item = this.getItem(item.product!)!;\n        await this.removeItem(itemSaved);\n    }\n\n    public async clear(): Promise<void> {\n        this.items.forEach(item => this.removeItem(item));\n        await storage.removeItem(CartStorage.LOCAL_VAR);\n    }\n\n    private async removeItem(item: Item): Promise<void> {\n        this.items.splice(this.items.indexOf(item), 1);\n        await this.commit();\n    }\n\n    private async commit(): Promise<void> {\n        await storage.setItem(CartStorage.LOCAL_VAR, JSON.stringify(this.items));\n    }\n\n}\n\nexport default new CartStorage();"]},"metadata":{},"sourceType":"module"}