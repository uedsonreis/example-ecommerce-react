{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/uedsonreis/Documents/Projetos/faculdades/aulas/example-ecommerce-react/src/screens/catalog/index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport api from \"../../utils/connection.api\";\nimport { CatalogView } from \"./view\";\nexport var CatalogScreen = function (_Component) {\n  _inherits(CatalogScreen, _Component);\n\n  var _super = _createSuper(CatalogScreen);\n\n  function CatalogScreen(props) {\n    var _this;\n\n    _classCallCheck(this, CatalogScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      products: []\n    };\n\n    _this.updateProductList();\n\n    return _this;\n  }\n\n  _createClass(CatalogScreen, [{\n    key: \"updateProductList\",\n    value: function updateProductList() {\n      var _this2 = this;\n\n      api.getProductList().then(function (result) {\n        _this2.setState({\n          products: result.data\n        });\n\n        console.log(\"Products: \", _this2.state.products);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CatalogView, {\n        products: this.state.products,\n        actions: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return CatalogScreen;\n}(Component);","map":{"version":3,"sources":["/Users/uedsonreis/Documents/Projetos/faculdades/aulas/example-ecommerce-react/src/screens/catalog/index.tsx"],"names":["React","Component","api","CatalogView","CatalogScreen","props","state","products","updateProductList","getProductList","then","result","setState","data","console","log"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAA4C,OAA5C;AAEA,OAAOC,GAAP;AAEA,SAASC,WAAT;AAKA,WAAaC,aAAb;AAAA;;AAAA;;AAEI,yBAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACpB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;;AAEA,UAAKC,iBAAL;;AALoB;AAMvB;;AARL;AAAA;AAAA,wCAUsC;AAAA;;AAC9BN,MAAAA,GAAG,CAACO,cAAJ,GAAqBC,IAArB,CAA0B,UAACC,MAAD,EAAiB;AACvC,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAEI,MAAM,CAACE;AAAnB,SAAd;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,MAAI,CAACT,KAAL,CAAWC,QAArC;AACH,OAHD;AAIH;AAfL;AAAA;AAAA,6BAiB+B;AACvB,aACI,oBAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAlC;AAA4C,QAAA,OAAO,EAAE,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;AArBL;;AAAA;AAAA,EAAmCN,SAAnC","sourcesContent":["import React, { Component, ReactNode } from 'react';\n\nimport api from '../../utils/connection.api';\nimport { Product } from '../../model/product';\nimport { CatalogView } from './view';\nimport { View } from 'react-native';\n\ntype State = { products: Product[] };\n\nexport class CatalogScreen extends Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = { products: [] };\n\n        this.updateProductList();\n    }\n\n    private updateProductList(): void {\n        api.getProductList().then((result: any) => {\n            this.setState({ products: result.data });\n            console.log(\"Products: \", this.state.products);\n        });\n    }\n\n    public render(): ReactNode {\n        return (\n            <CatalogView products={this.state.products} actions={this} />\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}