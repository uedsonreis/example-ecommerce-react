{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/TouchableItem.tsx\";import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import TouchableNativeFeedback from\"react-native-web/dist/exports/TouchableNativeFeedback\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";var ANDROID_VERSION_LOLLIPOP=21;var TouchableItem=function(_React$Component){_inherits(TouchableItem,_React$Component);function TouchableItem(){_classCallCheck(this,TouchableItem);return _possibleConstructorReturn(this,_getPrototypeOf(TouchableItem).apply(this,arguments));}_createClass(TouchableItem,[{key:\"render\",value:function render(){if(Platform.OS==='android'&&Platform.Version>=ANDROID_VERSION_LOLLIPOP){var _this$props=this.props,style=_this$props.style,rest=_objectWithoutProperties(_this$props,[\"style\"]);return React.createElement(TouchableNativeFeedback,_extends({},rest,{style:null,background:TouchableNativeFeedback.Ripple(this.props.pressColor,this.props.borderless),__source:{fileName:_jsxFileName,lineNumber:47}}),React.createElement(View,{style:style,__source:{fileName:_jsxFileName,lineNumber:55}},React.Children.only(this.props.children)));}return React.createElement(TouchableOpacity,_extends({},this.props,{__source:{fileName:_jsxFileName,lineNumber:61}}),this.props.children);}}]);return TouchableItem;}(React.Component);TouchableItem.defaultProps={borderless:false,pressColor:'rgba(0, 0, 0, .32)'};export{TouchableItem as default};","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","Component","defaultProps","borderless","pressColor","Platform","style","rest","TouchableNativeFeedback"],"mappings":"qkBASA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,0RASA,GAAMA,CAAAA,wBAAwB,CAA9B,EAAA,CAOqBC,GAAAA,CAAAA,a,kSAMV,CASP,GACEM,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EACAA,QAAQ,CAARA,OAAAA,EAFF,wBAAA,CAGE,CAAA,GAAA,CAAA,WAAA,CAC2B,KAD3B,KAAA,CACQC,KADR,CAAA,WAAA,CAAA,KAAA,CACkBC,IADlB,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAFP,IAAA,CAGE,UAAU,CAAEC,uBAAuB,CAAvBA,MAAAA,CACV,KAAA,KAAA,CADUA,UAAAA,CAEV,KAAA,KAAA,CALJ,UAGcA,CAHd,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAQE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAX,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAqBR,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAoB,KAAA,KAAA,CAT7C,QASyBA,CAArB,CARF,CADF,CAcF,OACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,CAAsB,KAAtB,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAmC,KAAA,KAAA,CADrC,QACE,CADF,C,4BAlCuCA,KAAK,CAACC,S,CAA5BF,CAAAA,a,CACZG,YADYH,CACG,CACpBI,UAAU,CADU,KAAA,CAEpBC,UAAU,CAFU,oBAAA,CADHL,C,OAAAA,a","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  pressColor: string;\n  borderless: boolean;\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props;\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor,\n            this.props.borderless\n          )}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}