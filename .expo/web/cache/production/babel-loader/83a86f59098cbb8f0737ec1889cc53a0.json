{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/DrawerSidebar.tsx\";import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{NavigationActions}from'react-navigation';var DrawerSidebar=function(_React$PureComponent){_inherits(DrawerSidebar,_React$PureComponent);function DrawerSidebar(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerSidebar);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerSidebar)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.getScreenOptions=function(routeKey){var descriptor=_this.props.descriptors[routeKey];if(!descriptor.options){throw new Error('Cannot access screen descriptor options from drawer sidebar');}return descriptor.options;};_this.getLabel=function(_ref){var focused=_ref.focused,tintColor=_ref.tintColor,route=_ref.route;var _this$getScreenOption=_this.getScreenOptions(route.key),drawerLabel=_this$getScreenOption.drawerLabel,title=_this$getScreenOption.title;if(drawerLabel){return typeof drawerLabel==='function'?drawerLabel({tintColor:tintColor,focused:focused}):drawerLabel;}if(typeof title==='string'){return title;}return route.routeName;};_this.renderIcon=function(_ref2){var focused=_ref2.focused,tintColor=_ref2.tintColor,route=_ref2.route;var _this$getScreenOption2=_this.getScreenOptions(route.key),drawerIcon=_this$getScreenOption2.drawerIcon;if(drawerIcon){return typeof drawerIcon==='function'?drawerIcon({tintColor:tintColor,focused:focused}):drawerIcon;}return null;};_this.handleItemPress=function(_ref3){var route=_ref3.route,focused=_ref3.focused;if(focused){_this.props.navigation.closeDrawer();}else{_this.props.navigation.dispatch(NavigationActions.navigate({routeName:route.routeName}));}};return _this;}_createClass(DrawerSidebar,[{key:\"render\",value:function render(){var ContentComponent=this.props.contentComponent;if(!ContentComponent){return null;}var state=this.props.navigation.state;if(typeof state.index!=='number'){throw new Error('The index of the route should be state in the navigation state');}return React.createElement(View,{style:[styles.container,this.props.style],__source:{fileName:_jsxFileName,lineNumber:100}},React.createElement(ContentComponent,_extends({},this.props.contentOptions,{navigation:this.props.navigation,descriptors:this.props.descriptors,drawerOpenProgress:this.props.drawerOpenProgress,items:state.routes,activeItemKey:state.routes[state.index]?state.routes[state.index].key:null,screenProps:this.props.screenProps,getLabel:this.getLabel,renderIcon:this.renderIcon,onItemPress:this.handleItemPress,drawerPosition:this.props.drawerPosition,__source:{fileName:_jsxFileName,lineNumber:101}})));}}]);return DrawerSidebar;}(React.PureComponent);export default DrawerSidebar;var styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"sources":["DrawerSidebar.tsx"],"names":["DrawerSidebar","React","PureComponent","getScreenOptions","descriptor","getLabel","focused","tintColor","route","drawerLabel","title","renderIcon","drawerIcon","handleItemPress","NavigationActions","routeName","ContentComponent","state","styles","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}