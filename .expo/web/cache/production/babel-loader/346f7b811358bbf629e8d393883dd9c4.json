{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React,{Component}from'react';import{Text}from'native-base';import api,{Authorization}from\"../../utils/connection.api\";import userSession from\"../../storage/user.session\";import HTTP from\"../../utils/http.codes\";import{MenuIcon}from\"../../components/sidemenu/menu.icon\";import{SalesOrderListScreenView}from\"./sales.order.list\";export var SalesOrderListScreen=function(_Component){_inherits(SalesOrderListScreen,_Component);function SalesOrderListScreen(props){var _this;_classCallCheck(this,SalesOrderListScreen);_this=_possibleConstructorReturn(this,_getPrototypeOf(SalesOrderListScreen).call(this,props));_this.state={salesOrders:undefined};_this.updateList();return _this;}_createClass(SalesOrderListScreen,[{key:\"updateList\",value:function updateList(){var _this2=this;userSession.getToken().then(function(token){api.setHeader(Authorization,\"Bearer \"+token);api.get('sales/order/list').then(function(result){if(result.status===HTTP.BAD_REQUEST){alert(\"You must login as a Customer to do the purchasing!\");_this2.props.navigation.navigate('Login');}else if(result.status===HTTP.FORBIDDEN){alert(\"Validation failure, You are not logged!\");_this2.props.navigation.navigate('Login');}else if(result.status===HTTP.OK){_this2.setState({salesOrders:result.data});console.log(\"The sales orders are here: \"+result.data);}else{alert(\"Erro ao buscar os pedidos: \"+JSON.stringify(result.data));}});});}},{key:\"formatDate\",value:function formatDate(dateText){var day=dateText.substring(8,10);var month=dateText.substring(5,7);var year=dateText.substring(0,4);var hours=dateText.substring(11,16);return day+\"/\"+month+\"/\"+year+\" às \"+hours+\"h\";}},{key:\"render\",value:function render(){return React.createElement(SalesOrderListScreenView,{salesOrders:this.state.salesOrders,actions:this});}}]);return SalesOrderListScreen;}(Component);SalesOrderListScreen.navigationOptions=function(_ref){var navigation=_ref.navigation;return{headerTitle:function headerTitle(){return React.createElement(Text,null,\"Meus Pedidos\");},headerLeft:function headerLeft(){return React.createElement(MenuIcon,{navigation:navigation});}};};","map":{"version":3,"sources":["/Users/uedsonreis/Documents/Projetos/faculdades/example-ecommerce-react/src/screens/sales-order-list/index.tsx"],"names":["React","Component","Text","api","Authorization","userSession","HTTP","MenuIcon","SalesOrderListScreenView","SalesOrderListScreen","props","state","salesOrders","undefined","updateList","getToken","then","token","setHeader","get","result","status","BAD_REQUEST","alert","navigation","navigate","FORBIDDEN","OK","setState","data","console","log","JSON","stringify","dateText","day","substring","month","year","hours","navigationOptions","headerTitle","headerLeft"],"mappings":"mVAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAA4C,OAA5C,CACA,OAAsBC,IAAtB,KAA2D,aAA3D,CAEA,MAAOC,CAAAA,GAAP,EAAcC,aAAd,kCACA,MAAOC,CAAAA,WAAP,kCACA,MAAOC,CAAAA,IAAP,8BAEA,OAASC,QAAT,2CAEA,OAASC,wBAAT,0BAIA,UAAaC,CAAAA,oBAAb,iEAWI,8BAAYC,KAAZ,CAAwB,sDACpB,sFAAMA,KAAN,GACA,MAAKC,KAAL,CAAa,CAAEC,WAAW,CAAEC,SAAf,CAAb,CACA,MAAKC,UAAL,GAHoB,aAIvB,CAfL,gFAiB+B,iBACvBT,WAAW,CAACU,QAAZ,GAAuBC,IAAvB,CAA4B,SAACC,KAAD,CAAmB,CAC3Cd,GAAG,CAACe,SAAJ,CAAcd,aAAd,CAA6B,UAAWa,KAAxC,EAEAd,GAAG,CAACgB,GAAJ,CAAQ,kBAAR,EAA4BH,IAA5B,CAAiC,SAACI,MAAD,CAAiB,CAC9C,GAAIA,MAAM,CAACC,MAAP,GAAkBf,IAAI,CAACgB,WAA3B,CAAwC,CACpCC,KAAK,CAAC,oDAAD,CAAL,CACA,MAAI,CAACb,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B,EACH,CAHD,IAGO,IAAIL,MAAM,CAACC,MAAP,GAAkBf,IAAI,CAACoB,SAA3B,CAAsC,CACzCH,KAAK,CAAC,yCAAD,CAAL,CACA,MAAI,CAACb,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B,EACH,CAHM,IAGA,IAAIL,MAAM,CAACC,MAAP,GAAkBf,IAAI,CAACqB,EAA3B,CAA+B,CAClC,MAAI,CAACC,QAAL,CAAc,CAAEhB,WAAW,CAAEQ,MAAM,CAACS,IAAtB,CAAd,EACAC,OAAO,CAACC,GAAR,CAAY,8BAA+BX,MAAM,CAACS,IAAlD,EACH,CAHM,IAGA,CACHN,KAAK,CAAC,8BAA8BS,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACS,IAAtB,CAA/B,CAAL,CACH,CACJ,CAbD,EAcH,CAjBD,EAkBH,CApCL,8CAsCsBK,QAtCtB,CAsCgD,CACxC,GAAMC,CAAAA,GAAW,CAAGD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAsB,EAAtB,CAApB,CACA,GAAMC,CAAAA,KAAa,CAAGH,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAsB,CAAtB,CAAtB,CACA,GAAME,CAAAA,IAAY,CAAGJ,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAsB,CAAtB,CAArB,CACA,GAAMG,CAAAA,KAAa,CAAGL,QAAQ,CAACE,SAAT,CAAmB,EAAnB,CAAuB,EAAvB,CAAtB,CAEA,MAAOD,CAAAA,GAAG,CAAE,GAAL,CAAUE,KAAV,CAAiB,GAAjB,CAAsBC,IAAtB,CAA4B,MAA5B,CAAoCC,KAApC,CAA4C,GAAnD,CACH,CA7CL,uCA+C+B,CACvB,MACI,qBAAC,wBAAD,EAA0B,WAAW,CAAE,KAAK5B,KAAL,CAAWC,WAAlD,CAA+D,OAAO,CAAE,IAAxE,EADJ,CAGH,CAnDL,kCAA0CX,SAA1C,EAAaQ,oB,CAEF+B,iB,CAAoB,cAAoB,IAAjBhB,CAAAA,UAAiB,MAAjBA,UAAiB,CAC3C,MAAO,CACHiB,WAAW,CAAE,6BAAM,qBAAC,IAAD,qBAAN,EADV,CAEHC,UAAU,CAAE,4BACR,qBAAC,QAAD,EAAU,UAAU,CAAElB,UAAtB,EADQ,EAFT,CAAP,CAMH,C","sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport { Right, Body, Text, List, ListItem, Content } from 'native-base';\n\nimport api, { Authorization } from '../../utils/connection.api';\nimport userSession from '../../storage/user.session';\nimport HTTP from '../../utils/http.codes';\n\nimport { MenuIcon } from '../../components/sidemenu/menu.icon';\nimport { SalesOrder } from '../../model/sales.order';\nimport { SalesOrderListScreenView } from './sales.order.list';\n\ntype State = { salesOrders: SalesOrder[] };\n\nexport class SalesOrderListScreen extends Component<any, State> {\n\n    static navigationOptions = ({ navigation }) => {\n        return {\n            headerTitle: () => <Text>Meus Pedidos</Text>,\n            headerLeft: () => (\n                <MenuIcon navigation={navigation} />\n            ),\n        };\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = { salesOrders: undefined };\n        this.updateList();\n    }\n\n    private updateList(): void {\n        userSession.getToken().then((token: string) => {\n            api.setHeader(Authorization, \"Bearer \"+ token);\n\n            api.get('sales/order/list').then((result: any) => {\n                if (result.status === HTTP.BAD_REQUEST) {\n                    alert(\"You must login as a Customer to do the purchasing!\");\n                    this.props.navigation.navigate('Login');\n                } else if (result.status === HTTP.FORBIDDEN) {\n                    alert(\"Validation failure, You are not logged!\");\n                    this.props.navigation.navigate('Login');\n                } else if (result.status === HTTP.OK) {\n                    this.setState({ salesOrders: result.data });\n                    console.log(\"The sales orders are here: \"+ result.data);\n                } else {\n                    alert(\"Erro ao buscar os pedidos: \"+JSON.stringify(result.data));\n                }\n            });\n        });\n    }\n\n    public formatDate(dateText: string): string {\n        const day: string = dateText.substring(8, 10);\n        const month: string = dateText.substring(5, 7);\n        const year: string = dateText.substring(0, 4);\n        const hours: string = dateText.substring(11, 16);\n        \n        return day +\"/\"+ month +\"/\"+ year +\" às \"+ hours + \"h\";\n    }\n\n    public render(): ReactNode {\n        return (\n            <SalesOrderListScreenView salesOrders={this.state.salesOrders} actions={this} />\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}