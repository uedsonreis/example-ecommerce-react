{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/Drawer.tsx\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import Platform from\"react-native-web/dist/exports/Platform\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import{PanGestureHandler,TapGestureHandler,State}from'react-native-gesture-handler';import Animated from'react-native-reanimated';import DrawerProgressContext from\"../utils/DrawerProgressContext\";var Clock=Animated.Clock,Value=Animated.Value,onChange=Animated.onChange,clockRunning=Animated.clockRunning,startClock=Animated.startClock,stopClock=Animated.stopClock,interpolate=Animated.interpolate,spring=Animated.spring,abs=Animated.abs,add=Animated.add,and=Animated.and,block=Animated.block,call=Animated.call,cond=Animated.cond,divide=Animated.divide,eq=Animated.eq,event=Animated.event,greaterThan=Animated.greaterThan,lessThan=Animated.lessThan,max=Animated.max,min=Animated.min,multiply=Animated.multiply,neq=Animated.neq,or=Animated.or,set=Animated.set,sub=Animated.sub;var TRUE=1;var FALSE=0;var NOOP=0;var UNSET=-1;var PROGRESS_EPSILON=0.05;var DIRECTION_LEFT=1;var DIRECTION_RIGHT=-1;var SWIPE_DISTANCE_THRESHOLD_DEFAULT=60;var SWIPE_DISTANCE_MINIMUM=5;var SPRING_CONFIG={stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01};var DrawerView=function(_React$PureComponent){_inherits(DrawerView,_React$PureComponent);function DrawerView(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.clock=new Clock();_this.isDrawerTypeFront=new Value(_this.props.drawerType==='front'?TRUE:FALSE);_this.isLocked=new Value(_this.props.locked?TRUE:FALSE);_this.isOpen=new Value(_this.props.open?TRUE:FALSE);_this.nextIsOpen=new Value(UNSET);_this.isSwiping=new Value(FALSE);_this.gestureState=new Value(State.UNDETERMINED);_this.touchX=new Value(0);_this.velocityX=new Value(0);_this.gestureX=new Value(0);_this.offsetX=new Value(0);_this.position=new Value(0);_this.containerWidth=new Value(0);_this.drawerWidth=new Value(0);_this.drawerOpacity=new Value(0);_this.drawerPosition=new Value(_this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);_this.touchDistanceFromDrawer=cond(_this.isDrawerTypeFront,cond(eq(_this.drawerPosition,DIRECTION_LEFT),max(sub(sub(_this.touchX,_this.gestureX),_this.drawerWidth),0),min(multiply(sub(sub(_this.containerWidth,_this.drawerWidth),sub(_this.touchX,_this.gestureX)),DIRECTION_RIGHT),0)),0);_this.swipeDistanceThreshold=new Value(_this.props.swipeDistanceThreshold!==undefined?_this.props.swipeDistanceThreshold:SWIPE_DISTANCE_THRESHOLD_DEFAULT);_this.swipeVelocityThreshold=new Value(_this.props.swipeVelocityThreshold);_this.currentOpenValue=_this.props.open;_this.isStatusBarHidden=false;_this.manuallyTriggerSpring=new Value(FALSE);_this.transitionTo=function(isOpen){var toValue=new Value(0);var frameTime=new Value(0);var state={position:_this.position,time:new Value(0),finished:new Value(FALSE),velocity:new Value(0)};return block([cond(clockRunning(_this.clock),NOOP,[set(toValue,multiply(isOpen,_this.drawerWidth,_this.drawerPosition)),set(frameTime,0),set(state.time,0),set(state.finished,FALSE),set(state.velocity,_this.velocityX),set(_this.isOpen,isOpen),startClock(_this.clock),set(_this.manuallyTriggerSpring,FALSE)]),spring(_this.clock,state,_objectSpread({},SPRING_CONFIG,{toValue:toValue})),cond(state.finished,[set(_this.touchX,0),set(_this.gestureX,0),set(_this.velocityX,0),set(_this.offsetX,0),stopClock(_this.clock),call([_this.isOpen],function(_ref){var _ref2=_slicedToArray(_ref,1),value=_ref2[0];var open=Boolean(value);if(open!==_this.props.open){_this.toggleDrawer(_this.props.open);}})])]);};_this.dragX=block([onChange(_this.isOpen,call([_this.isOpen],function(_ref3){var _ref4=_slicedToArray(_ref3,1),value=_ref4[0];var open=Boolean(value);_this.currentOpenValue=open;if(open!==_this.props.open){if(open){_this.props.onOpen();}else{_this.props.onClose();}_this.pendingOpenValue=open;_this.forceUpdate();}})),onChange(_this.nextIsOpen,cond(neq(_this.nextIsOpen,UNSET),[cond(clockRunning(_this.clock),stopClock(_this.clock)),set(_this.isOpen,_this.nextIsOpen),set(_this.gestureX,0),set(_this.nextIsOpen,UNSET)])),onChange(_this.isSwiping,call([_this.isSwiping],function(_ref5){var _ref6=_slicedToArray(_ref5,1),value=_ref6[0];var keyboardDismissMode=_this.props.keyboardDismissMode;if(value===TRUE){if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}_this.toggleStatusBar(true);}else{_this.toggleStatusBar(_this.currentOpenValue);}})),cond(eq(_this.gestureState,State.ACTIVE),[cond(_this.isSwiping,NOOP,[set(_this.isSwiping,TRUE),set(_this.offsetX,_this.position)]),set(_this.position,add(_this.offsetX,_this.gestureX,_this.touchDistanceFromDrawer)),stopClock(_this.clock)],[set(_this.isSwiping,FALSE),set(_this.touchX,0),_this.transitionTo(cond(_this.manuallyTriggerSpring,_this.isOpen,cond(or(and(greaterThan(abs(_this.gestureX),SWIPE_DISTANCE_MINIMUM),greaterThan(abs(_this.velocityX),_this.swipeVelocityThreshold)),greaterThan(abs(_this.gestureX),_this.swipeDistanceThreshold)),cond(eq(_this.drawerPosition,DIRECTION_LEFT),greaterThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0),lessThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0)),_this.isOpen)))]),_this.position]);_this.translateX=cond(eq(_this.drawerPosition,DIRECTION_RIGHT),min(max(multiply(_this.drawerWidth,-1),_this.dragX),0),max(min(_this.drawerWidth,_this.dragX),0));_this.progress=cond(eq(_this.drawerWidth,0),0,abs(divide(_this.translateX,_this.drawerWidth)));_this.handleGestureEvent=event([{nativeEvent:{x:_this.touchX,translationX:_this.gestureX,velocityX:_this.velocityX}}]);_this.handleGestureStateChange=event([{nativeEvent:{state:function state(s){return set(_this.gestureState,s);}}}]);_this.handleTapStateChange=event([{nativeEvent:{oldState:function oldState(s){return cond(and(eq(s,State.ACTIVE),eq(_this.isLocked,FALSE)),set(_this.manuallyTriggerSpring,TRUE));}}}]);_this.handleContainerLayout=function(e){return _this.containerWidth.setValue(e.nativeEvent.layout.width);};_this.handleDrawerLayout=function(e){_this.drawerWidth.setValue(e.nativeEvent.layout.width);_this.toggleDrawer(_this.props.open);requestAnimationFrame(function(){return _this.drawerOpacity.setValue(1);});};_this.toggleDrawer=function(open){if(_this.currentOpenValue!==open){_this.nextIsOpen.setValue(open?TRUE:FALSE);_this.currentOpenValue=open;}};_this.toggleStatusBar=function(hidden){var _this$props=_this.props,hideStatusBar=_this$props.hideStatusBar,statusBarAnimation=_this$props.statusBarAnimation;if(hideStatusBar&&_this.isStatusBarHidden!==hidden){_this.isStatusBarHidden=hidden;StatusBar.setHidden(hidden,statusBarAnimation);}};return _this;}_createClass(DrawerView,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props2=this.props,open=_this$props2.open,drawerPosition=_this$props2.drawerPosition,drawerType=_this$props2.drawerType,locked=_this$props2.locked,swipeDistanceThreshold=_this$props2.swipeDistanceThreshold,swipeVelocityThreshold=_this$props2.swipeVelocityThreshold,hideStatusBar=_this$props2.hideStatusBar;if(prevProps.locked!==locked){this.isLocked.setValue(locked?TRUE:FALSE);}if(typeof this.pendingOpenValue!=='boolean'||open!==this.pendingOpenValue){this.toggleDrawer(open);}this.pendingOpenValue=undefined;if(open!==prevProps.open&&hideStatusBar){this.toggleStatusBar(open);}if(prevProps.drawerPosition!==drawerPosition){this.drawerPosition.setValue(drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);}if(prevProps.drawerType!==drawerType){this.isDrawerTypeFront.setValue(drawerType==='front'?TRUE:FALSE);}if(prevProps.swipeDistanceThreshold!==swipeDistanceThreshold){this.swipeDistanceThreshold.setValue(swipeDistanceThreshold!==undefined?swipeDistanceThreshold:SWIPE_DISTANCE_THRESHOLD_DEFAULT);}if(prevProps.swipeVelocityThreshold!==swipeVelocityThreshold){this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.toggleStatusBar(false);}},{key:\"render\",value:function render(){var _this2=this;var _this$props3=this.props,open=_this$props3.open,locked=_this$props3.locked,drawerPosition=_this$props3.drawerPosition,drawerType=_this$props3.drawerType,swipeEdgeWidth=_this$props3.swipeEdgeWidth,sceneContainerStyle=_this$props3.sceneContainerStyle,drawerStyle=_this$props3.drawerStyle,overlayStyle=_this$props3.overlayStyle,onGestureRef=_this$props3.onGestureRef,renderDrawerContent=_this$props3.renderDrawerContent,renderSceneContent=_this$props3.renderSceneContent,gestureHandlerProps=_this$props3.gestureHandlerProps;var right=drawerPosition==='right';var contentTranslateX=drawerType==='front'?0:this.translateX;var drawerTranslateX=drawerType==='back'?I18nManager.isRTL?multiply(this.drawerWidth,DIRECTION_RIGHT):this.drawerWidth:this.translateX;var offset=I18nManager.isRTL?'100%':multiply(this.drawerWidth,-1);var hitSlop=right?{right:0,width:open?undefined:swipeEdgeWidth}:{left:0,width:open?undefined:swipeEdgeWidth};return React.createElement(DrawerProgressContext.Provider,{value:this.progress,__source:{fileName:_jsxFileName,lineNumber:524}},React.createElement(PanGestureHandler,_extends({ref:onGestureRef,activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],onGestureEvent:this.handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange,hitSlop:hitSlop,enabled:!locked},gestureHandlerProps,{__source:{fileName:_jsxFileName,lineNumber:525}}),React.createElement(Animated.View,{onLayout:this.handleContainerLayout,style:styles.main,__source:{fileName:_jsxFileName,lineNumber:535}},React.createElement(Animated.View,{style:[styles.content,{transform:[{translateX:contentTranslateX}]},sceneContainerStyle],importantForAccessibility:open?'no-hide-descendants':'yes',__source:{fileName:_jsxFileName,lineNumber:539}},renderSceneContent({progress:this.progress}),React.createElement(TapGestureHandler,{onHandlerStateChange:this.handleTapStateChange,__source:{fileName:_jsxFileName,lineNumber:550}},React.createElement(Animated.View,{style:[styles.overlay,{opacity:interpolate(this.progress,{inputRange:[PROGRESS_EPSILON,1],outputRange:[0,1]}),zIndex:cond(greaterThan(this.progress,PROGRESS_EPSILON),0,-1)},overlayStyle],__source:{fileName:_jsxFileName,lineNumber:553}}))),React.createElement(Animated.Code,{exec:block([onChange(this.manuallyTriggerSpring,[cond(eq(this.manuallyTriggerSpring,TRUE),[set(this.nextIsOpen,FALSE),call([],function(){return _this2.currentOpenValue=false;})])])]),__source:{fileName:_jsxFileName,lineNumber:575}}),React.createElement(Animated.View,{accessibilityViewIsModal:open,removeClippedSubviews:Platform.OS!=='ios',onLayout:this.handleDrawerLayout,style:[styles.container,right?{right:offset}:{left:offset},{transform:[{translateX:drawerTranslateX}],opacity:this.drawerOpacity,zIndex:drawerType==='back'?-1:0},drawerStyle],__source:{fileName:_jsxFileName,lineNumber:585}},renderDrawerContent({progress:this.progress})))));}}]);return DrawerView;}(React.PureComponent);DrawerView.defaultProps={locked:false,drawerPostion:I18nManager.isRTL?'left':'right',drawerType:'front',swipeEdgeWidth:32,swipeVelocityThreshold:500,keyboardDismissMode:'on-drag',hideStatusBar:false,statusBarAnimation:'slide'};export{DrawerView as default};var styles=StyleSheet.create({container:{backgroundColor:'white',position:'absolute',top:0,bottom:0,width:'80%',maxWidth:'100%'},overlay:_objectSpread({},StyleSheet.absoluteFillObject,{backgroundColor:'rgba(0, 0, 0, 0.5)'}),content:{flex:1},main:{flex:1,overflow:'hidden'}});","map":{"version":3,"sources":["Drawer.tsx"],"names":["Clock","Value","onChange","clockRunning","startClock","stopClock","interpolate","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","Animated","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","DrawerView","React","PureComponent","defaultProps","locked","drawerPostion","I18nManager","drawerType","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","prevProps","open","drawerPosition","swipeDistanceThreshold","clock","isDrawerTypeFront","isLocked","isOpen","nextIsOpen","isSwiping","gestureState","State","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","dragX","Keyboard","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","handleTapStateChange","oldState","handleContainerLayout","e","handleDrawerLayout","requestAnimationFrame","toggleDrawer","toggleStatusBar","StatusBar","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","offset","hitSlop","width","left","styles","transform","opacity","inputRange","outputRange","zIndex","Platform","StyleSheet","container","backgroundColor","top","bottom","maxWidth","overlay","content","flex","main","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  locked: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    locked: false,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      locked,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.locked !== locked) {\n      this.isLocked.setValue(locked ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isLocked = new Value(this.props.locked ? TRUE : FALSE);\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: ReadonlyArray<Binary>) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            and(eq(s, State.ACTIVE), eq(this.isLocked, FALSE)),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() => this.drawerOpacity.setValue(1));\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      locked,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={!locked}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolate(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}