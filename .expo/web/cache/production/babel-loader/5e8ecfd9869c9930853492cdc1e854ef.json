{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/osdnk/work/react-native-tab-view/src/TabView.tsx\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Animated from'react-native-reanimated';import TabBar from\"./TabBar\";import SceneView from\"./SceneView\";import Pager from\"./Pager\";var TabView=function(_React$Component){_inherits(TabView,_React$Component);function TabView(){var _getPrototypeOf2;var _this;_classCallCheck(this,TabView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TabView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={layout:_objectSpread({width:0,height:0},_this.props.initialLayout)};_this.jumpToIndex=function(index){if(index!==_this.props.navigationState.index){_this.props.onIndexChange(index);}};_this.handleLayout=function(e){var _e$nativeEvent$layout=e.nativeEvent.layout,height=_e$nativeEvent$layout.height,width=_e$nativeEvent$layout.width;if(_this.state.layout.width===width&&_this.state.layout.height===height){return;}_this.setState({layout:{height:height,width:width}});};return _this;}_createClass(TabView,[{key:\"render\",value:function render(){var _this$props=this.props,positionListener=_this$props.position,onSwipeStart=_this$props.onSwipeStart,onSwipeEnd=_this$props.onSwipeEnd,navigationState=_this$props.navigationState,lazy=_this$props.lazy,lazyPreloadDistance=_this$props.lazyPreloadDistance,removeClippedSubviews=_this$props.removeClippedSubviews,keyboardDismissMode=_this$props.keyboardDismissMode,swipeEnabled=_this$props.swipeEnabled,swipeVelocityImpact=_this$props.swipeVelocityImpact,timingConfig=_this$props.timingConfig,springConfig=_this$props.springConfig,tabBarPosition=_this$props.tabBarPosition,renderTabBar=_this$props.renderTabBar,renderScene=_this$props.renderScene,renderLazyPlaceholder=_this$props.renderLazyPlaceholder,sceneContainerStyle=_this$props.sceneContainerStyle,style=_this$props.style,gestureHandlerProps=_this$props.gestureHandlerProps,springVelocityScale=_this$props.springVelocityScale,renderPager=_this$props.renderPager;var layout=this.state.layout;return React.createElement(View,{onLayout:this.handleLayout,style:[styles.pager,style],__source:{fileName:_jsxFileName,lineNumber:128}},renderPager({navigationState:navigationState,layout:layout,keyboardDismissMode:keyboardDismissMode,swipeEnabled:swipeEnabled,swipeVelocityImpact:swipeVelocityImpact,timingConfig:timingConfig,springConfig:springConfig,onSwipeStart:onSwipeStart,onSwipeEnd:onSwipeEnd,onIndexChange:this.jumpToIndex,springVelocityScale:springVelocityScale,removeClippedSubviews:removeClippedSubviews,gestureHandlerProps:gestureHandlerProps,children:function children(_ref){var position=_ref.position,render=_ref.render,addListener=_ref.addListener,removeListener=_ref.removeListener,jumpTo=_ref.jumpTo;var sceneRendererProps={position:position,layout:layout,jumpTo:jumpTo};return React.createElement(React.Fragment,{__source:{fileName:_jsxFileName,lineNumber:159}},positionListener?React.createElement(Animated.Code,{exec:Animated.set(positionListener,position),__source:{fileName:_jsxFileName,lineNumber:161}}):null,tabBarPosition==='top'&&renderTabBar(_objectSpread({},sceneRendererProps,{navigationState:navigationState})),render(navigationState.routes.map(function(route,i){return React.createElement(SceneView,_extends({},sceneRendererProps,{addListener:addListener,removeListener:removeListener,key:route.key,index:i,lazy:lazy,lazyPreloadDistance:lazyPreloadDistance,navigationState:navigationState,style:sceneContainerStyle,__source:{fileName:_jsxFileName,lineNumber:173}}),function(_ref2){var loading=_ref2.loading;return loading?renderLazyPlaceholder({route:route}):renderScene(_objectSpread({},sceneRendererProps,{route:route}));});})),tabBarPosition==='bottom'&&renderTabBar(_objectSpread({},sceneRendererProps,{navigationState:navigationState})));}}));}}]);return TabView;}(React.Component);TabView.defaultProps={tabBarPosition:'top',renderTabBar:function renderTabBar(props){return React.createElement(TabBar,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:59}}));},renderLazyPlaceholder:function renderLazyPlaceholder(){return null;},keyboardDismissMode:'auto',swipeEnabled:true,lazy:false,lazyPreloadDistance:0,removeClippedSubviews:false,springConfig:{},timingConfig:{},gestureHandlerProps:{},renderPager:function renderPager(props){return React.createElement(Pager,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:70}}));}};export{TabView as default};var styles=StyleSheet.create({pager:{flex:1,overflow:'hidden'}});","map":{"version":3,"sources":["TabView.tsx"],"names":["TabView","React","Component","defaultProps","tabBarPosition","renderTabBar","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","springConfig","timingConfig","gestureHandlerProps","renderPager","state","layout","width","height","jumpToIndex","index","handleLayout","e","positionListener","onSwipeStart","onSwipeEnd","navigationState","swipeVelocityImpact","renderScene","sceneContainerStyle","style","springVelocityScale","styles","onIndexChange","children","position","render","addListener","removeListener","jumpTo","sceneRendererProps","Animated","route","loading","StyleSheet","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\ntype Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}