{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/DrawerView.tsx\";import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SceneView,ThemeColors,ThemeContext}from'react-navigation';import{ScreenContainer}from'react-native-screens';import*as DrawerActions from\"../routers/DrawerActions\";import DrawerSidebar from\"./DrawerSidebar\";import DrawerGestureContext from\"../utils/DrawerGestureContext\";import ResourceSavingScene from\"./ResourceSavingScene\";import Drawer from\"./Drawer\";var DrawerView=function(_React$PureComponent){_inherits(DrawerView,_React$PureComponent);function DrawerView(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={loaded:[_this.props.navigation.state.index],drawerWidth:typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth};_this.drawerGestureRef=React.createRef();_this.handleDrawerOpen=function(){var navigation=_this.props.navigation;navigation.dispatch(DrawerActions.openDrawer({key:navigation.state.key}));};_this.handleDrawerClose=function(){var navigation=_this.props.navigation;navigation.dispatch(DrawerActions.closeDrawer({key:navigation.state.key}));};_this.updateWidth=function(){var drawerWidth=typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth;if(_this.state.drawerWidth!==drawerWidth){_this.setState({drawerWidth:drawerWidth});}};_this.renderNavigationView=function(_ref){var progress=_ref.progress;return React.createElement(DrawerSidebar,_extends({screenProps:_this.props.screenProps,drawerOpenProgress:progress,navigation:_this.props.navigation,descriptors:_this.props.descriptors,contentComponent:_this.props.navigationConfig.contentComponent,contentOptions:_this.props.navigationConfig.contentOptions,drawerPosition:_this.props.navigationConfig.drawerPosition,style:_this.props.navigationConfig.style},_this.props.navigationConfig,{__source:{fileName:_jsxFileName,lineNumber:132}}));};_this.renderContent=function(){var _this$props=_this.props,lazy=_this$props.lazy,navigation=_this$props.navigation;var loaded=_this.state.loaded;var routes=navigation.state.routes;if(_this.props.navigationConfig.unmountInactiveRoutes){var activeKey=navigation.state.routes[navigation.state.index].key;var descriptor=_this.props.descriptors[activeKey];return React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent(),__source:{fileName:_jsxFileName,lineNumber:156}});}else{return React.createElement(ScreenContainer,{style:styles.content,__source:{fileName:_jsxFileName,lineNumber:164}},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;var descriptor=_this.props.descriptors[route.key];return React.createElement(ResourceSavingScene,{key:route.key,style:[StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused,__source:{fileName:_jsxFileName,lineNumber:175}},React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent(),__source:{fileName:_jsxFileName,lineNumber:183}}));}));}};_this.setDrawerGestureRef=function(ref){_this.drawerGestureRef.current=ref;};return _this;}_createClass(DrawerView,[{key:\"componentDidMount\",value:function componentDidMount(){Dimensions.addEventListener('change',this.updateWidth);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){Dimensions.removeEventListener('change',this.updateWidth);}},{key:\"getDrawerBackgroundColor\",value:function getDrawerBackgroundColor(){var drawerBackgroundColor=this.props.navigationConfig.drawerBackgroundColor;if(drawerBackgroundColor){return typeof drawerBackgroundColor==='string'?drawerBackgroundColor:drawerBackgroundColor[this.context];}else{return ThemeColors[this.context].bodyContent;}}},{key:\"getOverlayColor\",value:function getOverlayColor(){var overlayColor=this.props.navigationConfig.overlayColor;if(overlayColor){return typeof overlayColor==='string'?overlayColor:overlayColor[this.context];}else{return'rgba(0,0,0,0.5)';}}},{key:\"render\",value:function render(){var navigation=this.props.navigation;var _this$props$navigatio=this.props.navigationConfig,drawerType=_this$props$navigatio.drawerType,sceneContainerStyle=_this$props$navigatio.sceneContainerStyle,edgeWidth=_this$props$navigatio.edgeWidth,minSwipeDistance=_this$props$navigatio.minSwipeDistance,hideStatusBar=_this$props$navigatio.hideStatusBar,statusBarAnimation=_this$props$navigatio.statusBarAnimation,gestureHandlerProps=_this$props$navigatio.gestureHandlerProps;var activeKey=navigation.state.routes[navigation.state.index].key;var drawerLockMode=this.props.descriptors[activeKey].options.drawerLockMode;var drawerBackgroundColor=this.getDrawerBackgroundColor();var overlayColor=this.getOverlayColor();var isOpen=drawerLockMode==='locked-closed'?false:drawerLockMode==='locked-open'?true:this.props.navigation.state.isDrawerOpen;return React.createElement(DrawerGestureContext.Provider,{value:this.drawerGestureRef,__source:{fileName:_jsxFileName,lineNumber:250}},React.createElement(Drawer,{open:isOpen,locked:drawerLockMode==='locked-open'||drawerLockMode==='locked-closed',onOpen:this.handleDrawerOpen,onClose:this.handleDrawerClose,onGestureRef:this.setDrawerGestureRef,gestureHandlerProps:gestureHandlerProps,drawerType:drawerType,drawerPosition:this.props.navigationConfig.drawerPosition,sceneContainerStyle:sceneContainerStyle,drawerStyle:{backgroundColor:drawerBackgroundColor,width:this.state.drawerWidth},overlayStyle:{backgroundColor:overlayColor},swipeEdgeWidth:edgeWidth,swipeDistanceThreshold:minSwipeDistance,hideStatusBar:hideStatusBar,statusBarAnimation:statusBarAnimation,renderDrawerContent:this.renderNavigationView,renderSceneContent:this.renderContent,__source:{fileName:_jsxFileName,lineNumber:251}}));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat(_toConsumableArray(prevState.loaded),[index])};}}]);return DrawerView;}(React.PureComponent);DrawerView.contextType=ThemeContext;DrawerView.defaultProps={lazy:true};export{DrawerView as default};var styles=StyleSheet.create({content:{flex:1}});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["DrawerView","React","PureComponent","contextType","ThemeContext","defaultProps","lazy","nextProps","prevState","index","loaded","state","drawerWidth","Dimensions","drawerGestureRef","handleDrawerOpen","navigation","DrawerActions","key","handleDrawerClose","updateWidth","renderNavigationView","progress","renderContent","routes","activeKey","descriptor","styles","isFocused","route","StyleSheet","opacity","setDrawerGestureRef","drawerBackgroundColor","ThemeColors","overlayColor","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","drawerLockMode","isOpen","backgroundColor","width","content","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      return (\n        <ScreenContainer style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = this.props.navigationConfig;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    const isOpen =\n      drawerLockMode === 'locked-closed'\n        ? false\n        : drawerLockMode === 'locked-open'\n        ? true\n        : this.props.navigation.state.isDrawerOpen;\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={isOpen}\n          locked={\n            drawerLockMode === 'locked-open' ||\n            drawerLockMode === 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}